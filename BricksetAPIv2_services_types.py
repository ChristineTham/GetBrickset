################################################## 
# BricksetAPIv2_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://brickset.com/api/
##############################

class ns0:
    targetNamespace = "http://brickset.com/api/"

    class ArrayOfSets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfSets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfSets_Def.schema
            TClist = [GTD("http://brickset.com/api/","sets",lazy=False)(pname=(ns,"sets"), aname="_sets", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sets = []
                    return
            Holder.__name__ = "ArrayOfSets_Holder"
            self.pyclass = Holder

    class sets_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "sets")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sets_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"number"), aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberVariant"), aname="_numberVariant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"themeGroup"), aname="_themeGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subtheme"), aname="_subtheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pieces"), aname="_pieces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minifigs"), aname="_minifigs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"image"), aname="_image", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"imageFilename"), aname="_imageFilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"thumbnailURL"), aname="_thumbnailURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"largeThumbnailURL"), aname="_largeThumbnailURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"imageURL"), aname="_imageURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"bricksetURL"), aname="_bricksetURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"released"), aname="_released", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"owned"), aname="_owned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"wanted"), aname="_wanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"qtyOwned"), aname="_qtyOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userNotes"), aname="_userNotes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ACMDataCount"), aname="_ACMDataCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ownedByTotal"), aname="_ownedByTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"wantedByTotal"), aname="_wantedByTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UKRetailPrice"), aname="_UKRetailPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"USRetailPrice"), aname="_USRetailPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CARetailPrice"), aname="_CARetailPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EURetailPrice"), aname="_EURetailPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"rating"), aname="_rating", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reviewCount"), aname="_reviewCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"packagingType"), aname="_packagingType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"availability"), aname="_availability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"instructionsCount"), aname="_instructionsCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"additionalImageCount"), aname="_additionalImageCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EAN"), aname="_EAN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"lastUpdated"), aname="_lastUpdated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setID = None
                    self._number = None
                    self._numberVariant = None
                    self._name = None
                    self._year = None
                    self._theme = None
                    self._themeGroup = None
                    self._subtheme = None
                    self._pieces = None
                    self._minifigs = None
                    self._image = None
                    self._imageFilename = None
                    self._thumbnailURL = None
                    self._largeThumbnailURL = None
                    self._imageURL = None
                    self._bricksetURL = None
                    self._released = None
                    self._owned = None
                    self._wanted = None
                    self._qtyOwned = None
                    self._userNotes = None
                    self._ACMDataCount = None
                    self._ownedByTotal = None
                    self._wantedByTotal = None
                    self._UKRetailPrice = None
                    self._USRetailPrice = None
                    self._CARetailPrice = None
                    self._EURetailPrice = None
                    self._rating = None
                    self._reviewCount = None
                    self._packagingType = None
                    self._availability = None
                    self._instructionsCount = None
                    self._additionalImageCount = None
                    self._EAN = None
                    self._UPC = None
                    self._description = None
                    self._lastUpdated = None
                    return
            Holder.__name__ = "sets_Holder"
            self.pyclass = Holder

    class ArrayOfAdditionalImages_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfAdditionalImages")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfAdditionalImages_Def.schema
            TClist = [GTD("http://brickset.com/api/","additionalImages",lazy=False)(pname=(ns,"additionalImages"), aname="_additionalImages", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalImages = []
                    return
            Holder.__name__ = "ArrayOfAdditionalImages_Holder"
            self.pyclass = Holder

    class additionalImages_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "additionalImages")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.additionalImages_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"thumbnailURL"), aname="_thumbnailURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"largeThumbnailURL"), aname="_largeThumbnailURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"imageURL"), aname="_imageURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._thumbnailURL = None
                    self._largeThumbnailURL = None
                    self._imageURL = None
                    return
            Holder.__name__ = "additionalImages_Holder"
            self.pyclass = Holder

    class ArrayOfReviews_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfReviews")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfReviews_Def.schema
            TClist = [GTD("http://brickset.com/api/","reviews",lazy=False)(pname=(ns,"reviews"), aname="_reviews", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reviews = []
                    return
            Holder.__name__ = "ArrayOfReviews_Holder"
            self.pyclass = Holder

    class reviews_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "reviews")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reviews_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"author"), aname="_author", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"datePosted"), aname="_datePosted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"overallRating"), aname="_overallRating", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"parts"), aname="_parts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"buildingExperience"), aname="_buildingExperience", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"playability"), aname="_playability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"valueForMoney"), aname="_valueForMoney", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"review"), aname="_review", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HTML"), aname="_HTML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._author = None
                    self._datePosted = None
                    self._overallRating = None
                    self._parts = None
                    self._buildingExperience = None
                    self._playability = None
                    self._valueForMoney = None
                    self._title = None
                    self._review = None
                    self._HTML = None
                    return
            Holder.__name__ = "reviews_Holder"
            self.pyclass = Holder

    class ArrayOfInstructions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfInstructions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInstructions_Def.schema
            TClist = [GTD("http://brickset.com/api/","instructions",lazy=False)(pname=(ns,"instructions"), aname="_instructions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._instructions = []
                    return
            Holder.__name__ = "ArrayOfInstructions_Holder"
            self.pyclass = Holder

    class instructions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "instructions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.instructions_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"URL"), aname="_URL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._URL = None
                    self._description = None
                    return
            Holder.__name__ = "instructions_Holder"
            self.pyclass = Holder

    class ArrayOfMinifigCollection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfMinifigCollection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfMinifigCollection_Def.schema
            TClist = [GTD("http://brickset.com/api/","minifigCollection",lazy=False)(pname=(ns,"minifigCollection"), aname="_minifigCollection", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._minifigCollection = []
                    return
            Holder.__name__ = "ArrayOfMinifigCollection_Holder"
            self.pyclass = Holder

    class minifigCollection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "minifigCollection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.minifigCollection_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"minifigNumber"), aname="_minifigNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ownedInSets"), aname="_ownedInSets", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ownedLoose"), aname="_ownedLoose", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ownedTotal"), aname="_ownedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"wanted"), aname="_wanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._minifigNumber = None
                    self._ownedInSets = None
                    self._ownedLoose = None
                    self._ownedTotal = None
                    self._wanted = None
                    return
            Holder.__name__ = "minifigCollection_Holder"
            self.pyclass = Holder

    class ArrayOfThemes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfThemes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfThemes_Def.schema
            TClist = [GTD("http://brickset.com/api/","themes",lazy=False)(pname=(ns,"themes"), aname="_themes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._themes = []
                    return
            Holder.__name__ = "ArrayOfThemes_Holder"
            self.pyclass = Holder

    class themes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "themes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.themes_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setCount"), aname="_setCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"subthemeCount"), aname="_subthemeCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"yearFrom"), aname="_yearFrom", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"yearTo"), aname="_yearTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theme = None
                    self._setCount = None
                    self._subthemeCount = None
                    self._yearFrom = None
                    self._yearTo = None
                    return
            Holder.__name__ = "themes_Holder"
            self.pyclass = Holder

    class ArrayOfSubthemes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfSubthemes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfSubthemes_Def.schema
            TClist = [GTD("http://brickset.com/api/","subthemes",lazy=False)(pname=(ns,"subthemes"), aname="_subthemes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._subthemes = []
                    return
            Holder.__name__ = "ArrayOfSubthemes_Holder"
            self.pyclass = Holder

    class subthemes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "subthemes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.subthemes_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subtheme"), aname="_subtheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setCount"), aname="_setCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"yearFrom"), aname="_yearFrom", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"yearTo"), aname="_yearTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theme = None
                    self._subtheme = None
                    self._setCount = None
                    self._yearFrom = None
                    self._yearTo = None
                    return
            Holder.__name__ = "subthemes_Holder"
            self.pyclass = Holder

    class ArrayOfYears_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfYears")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfYears_Def.schema
            TClist = [GTD("http://brickset.com/api/","years",lazy=False)(pname=(ns,"years"), aname="_years", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._years = []
                    return
            Holder.__name__ = "ArrayOfYears_Holder"
            self.pyclass = Holder

    class years_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "years")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.years_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setCount"), aname="_setCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theme = None
                    self._year = None
                    self._setCount = None
                    return
            Holder.__name__ = "years_Holder"
            self.pyclass = Holder

    class ArrayOfUserNotes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfUserNotes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfUserNotes_Def.schema
            TClist = [GTD("http://brickset.com/api/","userNotes",lazy=False)(pname=(ns,"userNotes"), aname="_userNotes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userNotes = []
                    return
            Holder.__name__ = "ArrayOfUserNotes_Holder"
            self.pyclass = Holder

    class userNotes_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "userNotes")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.userNotes_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userNotes"), aname="_userNotes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setID = None
                    self._userNotes = None
                    return
            Holder.__name__ = "userNotes_Holder"
            self.pyclass = Holder

    class collectionTotals_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "collectionTotals")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.collectionTotals_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"totalSetsOwned"), aname="_totalSetsOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalDistinctSetsOwned"), aname="_totalDistinctSetsOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalSetsWanted"), aname="_totalSetsWanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalMinifigsOwned"), aname="_totalMinifigsOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"totalMinifigsWanted"), aname="_totalMinifigsWanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalSetsOwned = None
                    self._totalDistinctSetsOwned = None
                    self._totalSetsWanted = None
                    self._totalMinifigsOwned = None
                    self._totalMinifigsWanted = None
                    return
            Holder.__name__ = "collectionTotals_Holder"
            self.pyclass = Holder

    class collectionDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "collectionDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.collectionDetails_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"collectionID"), aname="_collectionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dateAcquired"), aname="_dateAcquired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currency"), aname="_currency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"pricePaid"), aname="_pricePaid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"additionalPricePaid"), aname="_additionalPricePaid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"currentEstimatedValue"), aname="_currentEstimatedValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conditionWhenAcquired"), aname="_conditionWhenAcquired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"acquiredFrom"), aname="_acquiredFrom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"conditionNow"), aname="_conditionNow", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notes"), aname="_notes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"parts"), aname="_parts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"minifigs"), aname="_minifigs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"instructions"), aname="_instructions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"box"), aname="_box", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"willTrade"), aname="_willTrade", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"modified"), aname="_modified", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"deleted"), aname="_deleted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._collectionID = None
                    self._dateAcquired = None
                    self._currency = None
                    self._pricePaid = None
                    self._additionalPricePaid = None
                    self._currentEstimatedValue = None
                    self._conditionWhenAcquired = None
                    self._acquiredFrom = None
                    self._conditionNow = None
                    self._location = None
                    self._notes = None
                    self._parts = None
                    self._minifigs = None
                    self._instructions = None
                    self._box = None
                    self._willTrade = None
                    self._modified = None
                    self._deleted = None
                    return
            Holder.__name__ = "collectionDetails_Holder"
            self.pyclass = Holder

    class ArrayOfCollectionDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfCollectionDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfCollectionDetails_Def.schema
            TClist = [GTD("http://brickset.com/api/","collectionDetails",lazy=False)(pname=(ns,"collectionDetails"), aname="_collectionDetails", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._collectionDetails = []
                    return
            Holder.__name__ = "ArrayOfCollectionDetails_Holder"
            self.pyclass = Holder

    class ArrayOfConditions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "ArrayOfConditions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfConditions_Def.schema
            TClist = [GTD("http://brickset.com/api/","conditions",lazy=False)(pname=(ns,"conditions"), aname="_conditions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._conditions = []
                    return
            Holder.__name__ = "ArrayOfConditions_Holder"
            self.pyclass = Holder

    class conditions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://brickset.com/api/"
        type = (schema, "conditions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.conditions_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"condition"), aname="_condition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._condition = None
                    return
            Holder.__name__ = "conditions_Holder"
            self.pyclass = Holder

    class getSets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSets"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSets_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"query"), aname="_query", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"subtheme"), aname="_subtheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"setNumber"), aname="_setNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"owned"), aname="_owned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wanted"), aname="_wanted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orderBy"), aname="_orderBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pageSize"), aname="_pageSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pageNumber"), aname="_pageNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userName"), aname="_userName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSets")
            kw["aname"] = "_getSets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._query = None
                    self._theme = None
                    self._subtheme = None
                    self._setNumber = None
                    self._year = None
                    self._owned = None
                    self._wanted = None
                    self._orderBy = None
                    self._pageSize = None
                    self._pageNumber = None
                    self._userName = None
                    return
            Holder.__name__ = "getSets_Holder"
            self.pyclass = Holder

    class getSetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSetsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSetsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfSets",lazy=False)(pname=(ns,"getSetsResult"), aname="_getSetsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSetsResponse")
            kw["aname"] = "_getSetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getSetsResult = None
                    return
            Holder.__name__ = "getSetsResponse_Holder"
            self.pyclass = Holder

    class getSet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSet"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSet_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SetID"), aname="_SetID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSet")
            kw["aname"] = "_getSet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._SetID = None
                    return
            Holder.__name__ = "getSet_Holder"
            self.pyclass = Holder

    class getSetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSetResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSetResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfSets",lazy=False)(pname=(ns,"getSetResult"), aname="_getSetResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSetResponse")
            kw["aname"] = "_getSetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getSetResult = None
                    return
            Holder.__name__ = "getSetResponse_Holder"
            self.pyclass = Holder

    class getRecentlyUpdatedSets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRecentlyUpdatedSets"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getRecentlyUpdatedSets_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"minutesAgo"), aname="_minutesAgo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getRecentlyUpdatedSets")
            kw["aname"] = "_getRecentlyUpdatedSets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._minutesAgo = None
                    return
            Holder.__name__ = "getRecentlyUpdatedSets_Holder"
            self.pyclass = Holder

    class getRecentlyUpdatedSetsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRecentlyUpdatedSetsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getRecentlyUpdatedSetsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfSets",lazy=False)(pname=(ns,"getRecentlyUpdatedSetsResult"), aname="_getRecentlyUpdatedSetsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getRecentlyUpdatedSetsResponse")
            kw["aname"] = "_getRecentlyUpdatedSetsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getRecentlyUpdatedSetsResult = None
                    return
            Holder.__name__ = "getRecentlyUpdatedSetsResponse_Holder"
            self.pyclass = Holder

    class getAdditionalImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAdditionalImages"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getAdditionalImages_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getAdditionalImages")
            kw["aname"] = "_getAdditionalImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._setID = None
                    return
            Holder.__name__ = "getAdditionalImages_Holder"
            self.pyclass = Holder

    class getAdditionalImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAdditionalImagesResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getAdditionalImagesResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfAdditionalImages",lazy=False)(pname=(ns,"getAdditionalImagesResult"), aname="_getAdditionalImagesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getAdditionalImagesResponse")
            kw["aname"] = "_getAdditionalImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getAdditionalImagesResult = None
                    return
            Holder.__name__ = "getAdditionalImagesResponse_Holder"
            self.pyclass = Holder

    class getReviews_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReviews"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getReviews_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getReviews")
            kw["aname"] = "_getReviews"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._setID = None
                    return
            Holder.__name__ = "getReviews_Holder"
            self.pyclass = Holder

    class getReviewsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getReviewsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getReviewsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfReviews",lazy=False)(pname=(ns,"getReviewsResult"), aname="_getReviewsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getReviewsResponse")
            kw["aname"] = "_getReviewsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getReviewsResult = None
                    return
            Holder.__name__ = "getReviewsResponse_Holder"
            self.pyclass = Holder

    class getInstructions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInstructions"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getInstructions_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getInstructions")
            kw["aname"] = "_getInstructions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._setID = None
                    return
            Holder.__name__ = "getInstructions_Holder"
            self.pyclass = Holder

    class getInstructionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInstructionsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getInstructionsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfInstructions",lazy=False)(pname=(ns,"getInstructionsResult"), aname="_getInstructionsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getInstructionsResponse")
            kw["aname"] = "_getInstructionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getInstructionsResult = None
                    return
            Holder.__name__ = "getInstructionsResponse_Holder"
            self.pyclass = Holder

    class getMinifigCollection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMinifigCollection"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getMinifigCollection_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"query"), aname="_query", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"owned"), aname="_owned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wanted"), aname="_wanted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getMinifigCollection")
            kw["aname"] = "_getMinifigCollection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._query = None
                    self._owned = None
                    self._wanted = None
                    return
            Holder.__name__ = "getMinifigCollection_Holder"
            self.pyclass = Holder

    class getMinifigCollectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMinifigCollectionResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getMinifigCollectionResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfMinifigCollection",lazy=False)(pname=(ns,"getMinifigCollectionResult"), aname="_getMinifigCollectionResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getMinifigCollectionResponse")
            kw["aname"] = "_getMinifigCollectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getMinifigCollectionResult = None
                    return
            Holder.__name__ = "getMinifigCollectionResponse_Holder"
            self.pyclass = Holder

    class getThemes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getThemes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getThemes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getThemes")
            kw["aname"] = "_getThemes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    return
            Holder.__name__ = "getThemes_Holder"
            self.pyclass = Holder

    class getThemesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getThemesResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getThemesResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfThemes",lazy=False)(pname=(ns,"getThemesResult"), aname="_getThemesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getThemesResponse")
            kw["aname"] = "_getThemesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getThemesResult = None
                    return
            Holder.__name__ = "getThemesResponse_Holder"
            self.pyclass = Holder

    class getSubthemes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubthemes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSubthemes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSubthemes")
            kw["aname"] = "_getSubthemes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._theme = None
                    return
            Holder.__name__ = "getSubthemes_Holder"
            self.pyclass = Holder

    class getSubthemesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubthemesResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSubthemesResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfSubthemes",lazy=False)(pname=(ns,"getSubthemesResult"), aname="_getSubthemesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSubthemesResponse")
            kw["aname"] = "_getSubthemesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getSubthemesResult = None
                    return
            Holder.__name__ = "getSubthemesResponse_Holder"
            self.pyclass = Holder

    class getYears_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getYears"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getYears_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getYears")
            kw["aname"] = "_getYears"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._theme = None
                    return
            Holder.__name__ = "getYears_Holder"
            self.pyclass = Holder

    class getYearsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getYearsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getYearsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfYears",lazy=False)(pname=(ns,"getYearsResult"), aname="_getYearsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getYearsResponse")
            kw["aname"] = "_getYearsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getYearsResult = None
                    return
            Holder.__name__ = "getYearsResponse_Holder"
            self.pyclass = Holder

    class getThemesForUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getThemesForUser"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getThemesForUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"owned"), aname="_owned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wanted"), aname="_wanted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getThemesForUser")
            kw["aname"] = "_getThemesForUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._owned = None
                    self._wanted = None
                    return
            Holder.__name__ = "getThemesForUser_Holder"
            self.pyclass = Holder

    class getThemesForUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getThemesForUserResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getThemesForUserResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfThemes",lazy=False)(pname=(ns,"getThemesForUserResult"), aname="_getThemesForUserResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getThemesForUserResponse")
            kw["aname"] = "_getThemesForUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getThemesForUserResult = None
                    return
            Holder.__name__ = "getThemesForUserResponse_Holder"
            self.pyclass = Holder

    class getSubthemesForUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubthemesForUser"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSubthemesForUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"owned"), aname="_owned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wanted"), aname="_wanted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSubthemesForUser")
            kw["aname"] = "_getSubthemesForUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._theme = None
                    self._userHash = None
                    self._owned = None
                    self._wanted = None
                    return
            Holder.__name__ = "getSubthemesForUser_Holder"
            self.pyclass = Holder

    class getSubthemesForUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSubthemesForUserResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getSubthemesForUserResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfSubthemes",lazy=False)(pname=(ns,"getSubthemesForUserResult"), aname="_getSubthemesForUserResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getSubthemesForUserResponse")
            kw["aname"] = "_getSubthemesForUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getSubthemesForUserResult = None
                    return
            Holder.__name__ = "getSubthemesForUserResponse_Holder"
            self.pyclass = Holder

    class getYearsForUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getYearsForUser"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getYearsForUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"theme"), aname="_theme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"owned"), aname="_owned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"wanted"), aname="_wanted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getYearsForUser")
            kw["aname"] = "_getYearsForUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._theme = None
                    self._userHash = None
                    self._owned = None
                    self._wanted = None
                    return
            Holder.__name__ = "getYearsForUser_Holder"
            self.pyclass = Holder

    class getYearsForUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getYearsForUserResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getYearsForUserResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfYears",lazy=False)(pname=(ns,"getYearsForUserResult"), aname="_getYearsForUserResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getYearsForUserResponse")
            kw["aname"] = "_getYearsForUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getYearsForUserResult = None
                    return
            Holder.__name__ = "getYearsForUserResponse_Holder"
            self.pyclass = Holder

    class getUserNotes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserNotes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getUserNotes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getUserNotes")
            kw["aname"] = "_getUserNotes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    return
            Holder.__name__ = "getUserNotes_Holder"
            self.pyclass = Holder

    class getUserNotesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserNotesResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getUserNotesResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfUserNotes",lazy=False)(pname=(ns,"getUserNotesResult"), aname="_getUserNotesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getUserNotesResponse")
            kw["aname"] = "_getUserNotesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getUserNotesResult = None
                    return
            Holder.__name__ = "getUserNotesResponse_Holder"
            self.pyclass = Holder

    class getCollectionTotals_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionTotals"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionTotals_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionTotals")
            kw["aname"] = "_getCollectionTotals"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    return
            Holder.__name__ = "getCollectionTotals_Holder"
            self.pyclass = Holder

    class getCollectionTotalsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionTotalsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionTotalsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","collectionTotals",lazy=False)(pname=(ns,"getCollectionTotalsResult"), aname="_getCollectionTotalsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionTotalsResponse")
            kw["aname"] = "_getCollectionTotalsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getCollectionTotalsResult = None
                    return
            Holder.__name__ = "getCollectionTotalsResponse_Holder"
            self.pyclass = Holder

    class setCollection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"qtyOwned"), aname="_qtyOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"wanted"), aname="_wanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection")
            kw["aname"] = "_setCollection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._setID = None
                    self._qtyOwned = None
                    self._wanted = None
                    return
            Holder.__name__ = "setCollection_Holder"
            self.pyclass = Holder

    class setCollectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollectionResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollectionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollectionResult"), aname="_setCollectionResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollectionResponse")
            kw["aname"] = "_setCollectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollectionResult = None
                    return
            Holder.__name__ = "setCollectionResponse_Holder"
            self.pyclass = Holder

    class setCollection_owns_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_owns"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_owns_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"owned"), aname="_owned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_owns")
            kw["aname"] = "_setCollection_owns"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._setID = None
                    self._owned = None
                    return
            Holder.__name__ = "setCollection_owns_Holder"
            self.pyclass = Holder

    class setCollection_ownsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_ownsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_ownsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollection_ownsResult"), aname="_setCollection_ownsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_ownsResponse")
            kw["aname"] = "_setCollection_ownsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollection_ownsResult = None
                    return
            Holder.__name__ = "setCollection_ownsResponse_Holder"
            self.pyclass = Holder

    class setCollection_wants_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_wants"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_wants_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"wanted"), aname="_wanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_wants")
            kw["aname"] = "_setCollection_wants"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._setID = None
                    self._wanted = None
                    return
            Holder.__name__ = "setCollection_wants_Holder"
            self.pyclass = Holder

    class setCollection_wantsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_wantsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_wantsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollection_wantsResult"), aname="_setCollection_wantsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_wantsResponse")
            kw["aname"] = "_setCollection_wantsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollection_wantsResult = None
                    return
            Holder.__name__ = "setCollection_wantsResponse_Holder"
            self.pyclass = Holder

    class setCollection_userNotes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_userNotes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_userNotes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notes"), aname="_notes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_userNotes")
            kw["aname"] = "_setCollection_userNotes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._setID = None
                    self._notes = None
                    return
            Holder.__name__ = "setCollection_userNotes_Holder"
            self.pyclass = Holder

    class setCollection_userNotesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_userNotesResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_userNotesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollection_userNotesResult"), aname="_setCollection_userNotesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_userNotesResponse")
            kw["aname"] = "_setCollection_userNotesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollection_userNotesResult = None
                    return
            Holder.__name__ = "setCollection_userNotesResponse_Holder"
            self.pyclass = Holder

    class setCollection_qtyOwned_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_qtyOwned"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_qtyOwned_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"setID"), aname="_setID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"qtyOwned"), aname="_qtyOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_qtyOwned")
            kw["aname"] = "_setCollection_qtyOwned"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._setID = None
                    self._qtyOwned = None
                    return
            Holder.__name__ = "setCollection_qtyOwned_Holder"
            self.pyclass = Holder

    class setCollection_qtyOwnedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollection_qtyOwnedResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollection_qtyOwnedResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollection_qtyOwnedResult"), aname="_setCollection_qtyOwnedResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollection_qtyOwnedResponse")
            kw["aname"] = "_setCollection_qtyOwnedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollection_qtyOwnedResult = None
                    return
            Holder.__name__ = "setCollection_qtyOwnedResponse_Holder"
            self.pyclass = Holder

    class setMinifigCollection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setMinifigCollection"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setMinifigCollection_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minifigNumber"), aname="_minifigNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"qtyOwned"), aname="_qtyOwned", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"wanted"), aname="_wanted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setMinifigCollection")
            kw["aname"] = "_setMinifigCollection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._minifigNumber = None
                    self._qtyOwned = None
                    self._wanted = None
                    return
            Holder.__name__ = "setMinifigCollection_Holder"
            self.pyclass = Holder

    class setMinifigCollectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setMinifigCollectionResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setMinifigCollectionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setMinifigCollectionResult"), aname="_setMinifigCollectionResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setMinifigCollectionResponse")
            kw["aname"] = "_setMinifigCollectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setMinifigCollectionResult = None
                    return
            Holder.__name__ = "setMinifigCollectionResponse_Holder"
            self.pyclass = Holder

    class login_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "login"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.login_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"username"), aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","login")
            kw["aname"] = "_login"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "login_Holder"
            self.pyclass = Holder

    class loginResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.loginResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"loginResult"), aname="_loginResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","loginResponse")
            kw["aname"] = "_loginResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._loginResult = None
                    return
            Holder.__name__ = "loginResponse_Holder"
            self.pyclass = Holder

    class setCollectionDetail_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollectionDetail"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollectionDetail_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://brickset.com/api/","collectionDetails",lazy=False)(pname=(ns,"detail"), aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollectionDetail")
            kw["aname"] = "_setCollectionDetail"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._detail = None
                    return
            Holder.__name__ = "setCollectionDetail_Holder"
            self.pyclass = Holder

    class setCollectionDetailResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCollectionDetailResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.setCollectionDetailResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"setCollectionDetailResult"), aname="_setCollectionDetailResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","setCollectionDetailResponse")
            kw["aname"] = "_setCollectionDetailResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._setCollectionDetailResult = None
                    return
            Holder.__name__ = "setCollectionDetailResponse_Holder"
            self.pyclass = Holder

    class getCollectionDetail_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionDetail"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionDetail_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userHash"), aname="_userHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SetID"), aname="_SetID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionDetail")
            kw["aname"] = "_getCollectionDetail"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._userHash = None
                    self._SetID = None
                    return
            Holder.__name__ = "getCollectionDetail_Holder"
            self.pyclass = Holder

    class getCollectionDetailResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionDetailResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionDetailResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfCollectionDetails",lazy=False)(pname=(ns,"getCollectionDetailResult"), aname="_getCollectionDetailResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionDetailResponse")
            kw["aname"] = "_getCollectionDetailResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getCollectionDetailResult = None
                    return
            Holder.__name__ = "getCollectionDetailResponse_Holder"
            self.pyclass = Holder

    class getCollectionDetailConditions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionDetailConditions"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionDetailConditions_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"which"), aname="_which", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionDetailConditions")
            kw["aname"] = "_getCollectionDetailConditions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    self._which = None
                    return
            Holder.__name__ = "getCollectionDetailConditions_Holder"
            self.pyclass = Holder

    class getCollectionDetailConditionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCollectionDetailConditionsResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.getCollectionDetailConditionsResponse_Dec.schema
            TClist = [GTD("http://brickset.com/api/","ArrayOfConditions",lazy=False)(pname=(ns,"getCollectionDetailConditionsResult"), aname="_getCollectionDetailConditionsResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","getCollectionDetailConditionsResponse")
            kw["aname"] = "_getCollectionDetailConditionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._getCollectionDetailConditionsResult = None
                    return
            Holder.__name__ = "getCollectionDetailConditionsResponse_Holder"
            self.pyclass = Holder

    class checkKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkKey"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.checkKey_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"apiKey"), aname="_apiKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","checkKey")
            kw["aname"] = "_checkKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apiKey = None
                    return
            Holder.__name__ = "checkKey_Holder"
            self.pyclass = Holder

    class checkKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkKeyResponse"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            ns = ns0.checkKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"checkKeyResult"), aname="_checkKeyResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://brickset.com/api/","checkKeyResponse")
            kw["aname"] = "_checkKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkKeyResult = None
                    return
            Holder.__name__ = "checkKeyResponse_Holder"
            self.pyclass = Holder

    class ArrayOfSets_Dec(ElementDeclaration):
        literal = "ArrayOfSets"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfSets")
            kw["aname"] = "_ArrayOfSets"
            if ns0.ArrayOfSets_Def not in ns0.ArrayOfSets_Dec.__bases__:
                bases = list(ns0.ArrayOfSets_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfSets_Def)
                ns0.ArrayOfSets_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfSets_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfSets_Dec_Holder"

    class ArrayOfAdditionalImages_Dec(ElementDeclaration):
        literal = "ArrayOfAdditionalImages"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfAdditionalImages")
            kw["aname"] = "_ArrayOfAdditionalImages"
            if ns0.ArrayOfAdditionalImages_Def not in ns0.ArrayOfAdditionalImages_Dec.__bases__:
                bases = list(ns0.ArrayOfAdditionalImages_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfAdditionalImages_Def)
                ns0.ArrayOfAdditionalImages_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfAdditionalImages_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfAdditionalImages_Dec_Holder"

    class ArrayOfReviews_Dec(ElementDeclaration):
        literal = "ArrayOfReviews"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfReviews")
            kw["aname"] = "_ArrayOfReviews"
            if ns0.ArrayOfReviews_Def not in ns0.ArrayOfReviews_Dec.__bases__:
                bases = list(ns0.ArrayOfReviews_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfReviews_Def)
                ns0.ArrayOfReviews_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfReviews_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfReviews_Dec_Holder"

    class ArrayOfInstructions_Dec(ElementDeclaration):
        literal = "ArrayOfInstructions"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfInstructions")
            kw["aname"] = "_ArrayOfInstructions"
            if ns0.ArrayOfInstructions_Def not in ns0.ArrayOfInstructions_Dec.__bases__:
                bases = list(ns0.ArrayOfInstructions_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfInstructions_Def)
                ns0.ArrayOfInstructions_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfInstructions_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfInstructions_Dec_Holder"

    class ArrayOfMinifigCollection_Dec(ElementDeclaration):
        literal = "ArrayOfMinifigCollection"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfMinifigCollection")
            kw["aname"] = "_ArrayOfMinifigCollection"
            if ns0.ArrayOfMinifigCollection_Def not in ns0.ArrayOfMinifigCollection_Dec.__bases__:
                bases = list(ns0.ArrayOfMinifigCollection_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfMinifigCollection_Def)
                ns0.ArrayOfMinifigCollection_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfMinifigCollection_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfMinifigCollection_Dec_Holder"

    class ArrayOfThemes_Dec(ElementDeclaration):
        literal = "ArrayOfThemes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfThemes")
            kw["aname"] = "_ArrayOfThemes"
            if ns0.ArrayOfThemes_Def not in ns0.ArrayOfThemes_Dec.__bases__:
                bases = list(ns0.ArrayOfThemes_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfThemes_Def)
                ns0.ArrayOfThemes_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfThemes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfThemes_Dec_Holder"

    class ArrayOfSubthemes_Dec(ElementDeclaration):
        literal = "ArrayOfSubthemes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfSubthemes")
            kw["aname"] = "_ArrayOfSubthemes"
            if ns0.ArrayOfSubthemes_Def not in ns0.ArrayOfSubthemes_Dec.__bases__:
                bases = list(ns0.ArrayOfSubthemes_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfSubthemes_Def)
                ns0.ArrayOfSubthemes_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfSubthemes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfSubthemes_Dec_Holder"

    class ArrayOfYears_Dec(ElementDeclaration):
        literal = "ArrayOfYears"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfYears")
            kw["aname"] = "_ArrayOfYears"
            if ns0.ArrayOfYears_Def not in ns0.ArrayOfYears_Dec.__bases__:
                bases = list(ns0.ArrayOfYears_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfYears_Def)
                ns0.ArrayOfYears_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfYears_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfYears_Dec_Holder"

    class ArrayOfUserNotes_Dec(ElementDeclaration):
        literal = "ArrayOfUserNotes"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfUserNotes")
            kw["aname"] = "_ArrayOfUserNotes"
            if ns0.ArrayOfUserNotes_Def not in ns0.ArrayOfUserNotes_Dec.__bases__:
                bases = list(ns0.ArrayOfUserNotes_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfUserNotes_Def)
                ns0.ArrayOfUserNotes_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfUserNotes_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfUserNotes_Dec_Holder"

    class collectionTotals_Dec(ElementDeclaration):
        literal = "collectionTotals"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","collectionTotals")
            kw["aname"] = "_collectionTotals"
            if ns0.collectionTotals_Def not in ns0.collectionTotals_Dec.__bases__:
                bases = list(ns0.collectionTotals_Dec.__bases__)
                bases.insert(0, ns0.collectionTotals_Def)
                ns0.collectionTotals_Dec.__bases__ = tuple(bases)

            ns0.collectionTotals_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "collectionTotals_Dec_Holder"

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class ArrayOfCollectionDetails_Dec(ElementDeclaration):
        literal = "ArrayOfCollectionDetails"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfCollectionDetails")
            kw["aname"] = "_ArrayOfCollectionDetails"
            if ns0.ArrayOfCollectionDetails_Def not in ns0.ArrayOfCollectionDetails_Dec.__bases__:
                bases = list(ns0.ArrayOfCollectionDetails_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfCollectionDetails_Def)
                ns0.ArrayOfCollectionDetails_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfCollectionDetails_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfCollectionDetails_Dec_Holder"

    class ArrayOfConditions_Dec(ElementDeclaration):
        literal = "ArrayOfConditions"
        schema = "http://brickset.com/api/"
        def __init__(self, **kw):
            kw["pname"] = ("http://brickset.com/api/","ArrayOfConditions")
            kw["aname"] = "_ArrayOfConditions"
            if ns0.ArrayOfConditions_Def not in ns0.ArrayOfConditions_Dec.__bases__:
                bases = list(ns0.ArrayOfConditions_Dec.__bases__)
                bases.insert(0, ns0.ArrayOfConditions_Def)
                ns0.ArrayOfConditions_Dec.__bases__ = tuple(bases)

            ns0.ArrayOfConditions_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ArrayOfConditions_Dec_Holder"

# end class ns0 (tns: http://brickset.com/api/)
